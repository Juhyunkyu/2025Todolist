## 📋 ToDo Planner 프로젝트 개발 규칙

### 🎨 UI 컴포넌트 사용 규칙 (MANDATORY)

#### ✅ 기존 UI 컴포넌트 필수 사용
프로젝트에서 UI 요소가 필요할 때는 **반드시** 아래의 기존 컴포넌트를 사용해야 합니다:

**사용 가능한 컴포넌트 목록:**
- `Button` - 모든 버튼 요소 (`src/components/ui/Button/`)
- `Input` - 모든 입력 필드 (`src/components/ui/Input/`)  
- `Badge` - 태그, 라벨, 상태 표시 (`src/components/ui/Badge/`)
- `Checkbox` - 체크박스 (`src/components/ui/Checkbox.tsx`)
- `Select` - 드롭다운 선택 (`src/components/ui/Select.tsx`)
- `Card` - 카드 레이아웃 (`src/components/ui/Card.tsx`)

**올바른 Import 방법:**
```typescript
// ✅ 올바른 사용법 - 반드시 이렇게만 사용!
import { Button, Input, Badge } from '@/components/ui';

// ✅ 개별 컴포넌트 import (허용됨)
import Card from '@/components/ui/Card';
import Checkbox from '@/components/ui/Checkbox';
import Select from '@/components/ui/Select';
```

**❌ 절대 금지된 Import 방법:**
```typescript
// ❌ 틀린 사용법 - 절대 사용 금지!
import Button from '@/components/ui/Button/Button';  // ← 빌드 에러 발생!
import { ButtonProps } from '@/components/ui/Button/Button';  // ← 타입 에러!
import Badge from '@/components/ui/Badge/Badge';  // ← 경로 에러!

// ❌ 하위 폴더 직접 접근 금지
import * as ButtonComponents from '@/components/ui/Button/';
```

#### 🚫 새로운 UI 컴포넌트 생성 금지
새로운 UI 컴포넌트를 만들기 전에 **반드시 사용자에게 먼저 물어봐야 합니다.**

**새 컴포넌트 제안 시 포함할 내용:**
1. **어떤 컴포넌트를 만들 것인지** (컴포넌트명, 기능 설명)
2. **왜 만들어야 하는지** (기존 컴포넌트로 해결 불가능한 이유)
3. **어디에 사용할 것인지** (구체적인 사용 위치, 페이지명)
4. **기존 컴포넌트 확장 가능성** (variant 추가로 해결 가능한지 검토)

**예시:**
```
🤔 새로운 컴포넌트 제안
- 컴포넌트명: Modal
- 이유: 설정 변경, 확인 다이얼로그에 필요하지만 기존 컴포넌트로는 불가능
- 사용 위치: /settings 페이지, 투두 삭제 확인
- 기존 확장 불가: Card는 오버레이 모달 기능 없음
```

### 🎨 테마 시스템 보호 규칙 (DO NOT TOUCH)

#### 🔒 수정 금지 영역
다음 파일들은 **절대 수정하지 마세요:**

**테마 시스템 파일:**
- `src/theme/theme.json` - 기본 테마 정의
- `src/theme/types.ts` - 테마 타입 정의
- `src/theme/index.ts` - 테마 유틸리티 함수
- `src/app/showcase/page.tsx` - 테마 데모 페이지

#### ✅ 테마 사용 방법
테마를 사용할 때는 다음과 같이 import하여 사용:
```typescript
import { theme } from '@/theme';

// 올바른 사용법
const buttonStyle = {
  backgroundColor: theme.colors.primary.brand,
  color: theme.colors.text.primary,
  fontSize: theme.typography.fontSize.base,
  padding: theme.spacing["4"]
};
```

### 🎯 UI 통일성 유지 규칙

#### 1. 일관된 스타일링
- **색상**: `theme.colors.*`만 사용
- **타이포그래피**: `theme.typography.*`만 사용  
- **간격**: `theme.spacing.*`만 사용
- **테두리**: `theme.borderRadius.*`만 사용

#### 2. 컴포넌트 variant 활용
기존 컴포넌트의 다양한 variant를 최대한 활용:
```typescript
// Button variants
<Button variant="primary" size="lg">주 버튼</Button>
<Button variant="secondary" size="sm">보조 버튼</Button>
<Button variant="ghost">투명 버튼</Button>

// Badge variants  
<Badge variant="default">기본</Badge>
<Badge variant="success">성공</Badge>
<Badge variant="warning">경고</Badge>
```

#### 3. 임의 스타일링 금지
- 인라인 스타일 최소화
- Tailwind 클래스보다는 테마 객체 사용 우선
- 커스텀 CSS 파일 생성 시 사용자 승인 필요

### 📝 코드 작성 규칙

#### 1. 컴포넌트 구조
```typescript
// 올바른 컴포넌트 구조
import { theme } from '@/theme';
import { Button, Input } from '@/components/ui';

export default function MyComponent() {
  return (
    <div style={{ 
      padding: theme.spacing["6"],
      backgroundColor: theme.colors.background.primary 
    }}>
      <Button variant="primary">저장</Button>
    </div>
  );
}
```

#### 2. 타입 안전성
- 모든 props에 TypeScript 타입 지정
- 테마 타입 활용: `import type { LinearTheme } from '@/theme/types';`

### 🚨 개발 안전 규칙 (CRITICAL)

#### ❌ 절대 금지 사항
1. **빌드 명령어 사용 금지** (기능 완성 전까지)
   ```bash
   # ❌ 절대 실행 금지!
   npm run build
   ```

2. **기존 UI 컴포넌트 파일 수정 금지**
   ```bash
   # ❌ 절대 수정 금지!
   src/components/ui/Button/Button.tsx
   src/components/ui/Input/Input.tsx
   src/components/ui/Badge/Badge.tsx
   src/components/ui/Card.tsx
   src/components/ui/Checkbox.tsx
   src/components/ui/Select.tsx
   ```

3. **잘못된 Import 사용 시 즉시 중단**

#### ✅ 안전한 개발 방법
1. **개발 서버만 사용**: `npm run dev`
2. **새 파일만 생성**: 기존 파일 수정 금지
3. **올바른 Import만 사용**: 위의 예시 참고

### 🚨 위반 시 행동 지침

만약 다음 행동을 시도한다면 **즉시 중단하고 사용자에게 확인 요청**:
1. 새로운 UI 컴포넌트 생성
2. 테마 파일 수정
3. showcase 페이지 테마 데모 수정
4. 기존 UI 컴포넌트 무시하고 직접 스타일링
5. 커스텀 CSS 파일 생성
6. **빌드 명령어 실행**
7. **기존 UI 컴포넌트 파일 수정**

**확인 요청 예시:**
```
⚠️  규칙 위반 감지
시도한 작업: 새로운 Modal 컴포넌트 생성
이유: 사용자 확인 없는 새 컴포넌트 생성은 금지됨

질문:
1. Modal 컴포넌트가 정말 필요한가요?
2. 기존 Card 컴포넌트로 해결 불가능한가요?
3. 어디에 사용할 예정인가요?

사용자 승인 후 진행하겠습니다.
```

### 💡 권장사항

#### 1. 재사용성 극대화  
- 컴포넌트 variant 추가로 다양한 용도 지원
- props를 통한 유연한 커스터마이징

#### 2. 일관된 사용자 경험
- 모든 페이지에서 동일한 컴포넌트 사용
- 테마 기반 일관된 색상/타이포그래피 적용

#### 3. 확장 가능한 구조
- 새 기능 추가 시 기존 패턴 따르기
- 컴포넌트 조합으로 복잡한 UI 구성

### 🧠 MCP 도구 활용 규칙

#### 1. Sequential Thinking 필수 사용 상황
다음 경우에는 **반드시** Sequential Thinking을 활용하여 단계별로 분석:
- 복잡한 기능 구현 (3단계 이상의 로직)
- 데이터 구조 설계 (IndexedDB 스키마, API 구조 등)
- 성능 최적화 문제 해결
- 사용자 플로우가 복잡한 기능
- 에러 디버깅 (원인 → 해결 과정)

**예시:**
```
복잡한 할일 반복 알림 시스템 구현 시:
1단계: 문제 정의 및 요구사항 분석
2단계: 데이터 모델 설계
3단계: 알림 스케줄링 로직
4단계: UI/UX 고려사항
5단계: 테스트 계획
```

#### 2. Context7 라이브러리 문서 확인 필수
새로운 라이브러리나 API 사용 시 **반드시** Context7로 최신 문서 확인:
- React, Next.js, Supabase 등의 새 기능 사용
- 알려지지 않은 라이브러리 API 사용
- 버전 업데이트로 인한 변경사항 확인
- 베스트 프랙티스 확인

**확인 순서:**
1. `resolve-library-id`로 라이브러리 ID 확인
2. `get-library-docs`로 관련 문서 가져오기
3. 최신 사용법에 맞춰 구현

#### 3. 문제 해결 체계적 접근
버그나 이슈 발생 시:
1. **Sequential Thinking**으로 문제 원인 분석
2. **Context7**로 관련 라이브러리 문서 재확인
3. 해결책 도출 및 검증
4. 재발 방지를 위한 코드 개선

#### 4. 기능 설계 시 MCP 활용 플로우
```
새로운 기능 개발 시:
1. Sequential Thinking → 기능 분석 및 설계
2. Context7 → 필요한 라이브러리 최신 문서 확인
3. UI 컴포넌트 → 기존 컴포넌트 활용 (위 규칙 준수)
4. 테마 시스템 → theme 객체 활용
5. 구현 및 테스트
```

---

**📌 이 규칙들은 프로젝트의 UI 통일성과 코드 품질을 보장하기 위한 필수 사항입니다.**
**MCP 도구들을 적극 활용하여 체계적이고 정확한 개발을 진행해 주세요.**