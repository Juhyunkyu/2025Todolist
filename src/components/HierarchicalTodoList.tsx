"use client";

import React, { useState, useEffect, useCallback } from "react";
import {
  Button,
  Input,
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  Badge,
} from "@/components/ui";
import { useTheme } from "@/contexts/ThemeContext";
import HierarchicalTodoItem, { HierarchicalTodo } from "./HierarchicalTodoItem";
import {
  getHierarchicalTodosByParent,
  addHierarchicalTodo,
  copyHierarchicalTodosAsMarkdown,
  getHierarchicalTodoProgress,
  reorderHierarchicalTodos,
  expandAllHierarchicalTodos,
} from "@/lib/db";

import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  DragEndEvent,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";

interface HierarchicalTodoListProps {
  title?: string;
  showAddButton?: boolean;
  showCopyButton?: boolean;
  showStats?: boolean;
  todos?: HierarchicalTodo[]; // Ïô∏Î∂ÄÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞
  onUpdate?: () => void; // Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ ÏΩúÎ∞±
}

const HierarchicalTodoList: React.FC<HierarchicalTodoListProps> = ({
  title = "Í≥ÑÏ∏µÏ†Å Ìï†Ïùº Î™©Î°ù",
  showAddButton = true,
  showCopyButton = true,
  showStats = true,
  todos: externalTodos,
  onUpdate,
}) => {
  const { currentTheme } = useTheme();
  const [todos, setTodos] = useState<HierarchicalTodo[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isAdding, setIsAdding] = useState(false);
  const [newTodoTitle, setNewTodoTitle] = useState("");
  const [progress, setProgress] = useState({
    completed: 0,
    total: 0,
    percentage: 0,
  });
  const [message, setMessage] = useState("");
  const [isAllExpanded, setIsAllExpanded] = useState(false);
  const [isExpandingAll, setIsExpandingAll] = useState(false);

  // ÎìúÎûòÍ∑∏Ïï§ÎìúÎ°≠ ÏÑºÏÑú ÏÑ§Ï†ï
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8, // 8px Ïù¥Îèô ÌõÑ ÎìúÎûòÍ∑∏ ÏãúÏûë (Ïã§Ïàò Î∞©ÏßÄ)
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  // Ìï†Ïùº Î™©Î°ù Î°úÎìú
  const loadTodos = useCallback(async () => {
    try {
      setIsLoading(true);

      // Ïô∏Î∂ÄÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ ÏßÅÏ†ë Î°úÎìú
      if (externalTodos) {
        setTodos(externalTodos);
      } else {
        const rootTodos = await getHierarchicalTodosByParent(); // ÏµúÏÉÅÏúÑ Ìï≠Î™©Îì§Îßå
        setTodos(rootTodos);
      }

      // Ï†ÑÏ≤¥ ÏßÑÌñâÎ•† Í≥ÑÏÇ∞
      if (showStats) {
        try {
          const progressData = await getHierarchicalTodoProgress();
          setProgress(progressData);
        } catch (progressError) {
          console.error("Failed to load progress:", progressError);
          // ÏßÑÌñâÎ•† Î°úÎìú Ïã§Ìå®Ìï¥ÎèÑ Í≥ÑÏÜç ÏßÑÌñâ
        }
      }

      // Ï†ÑÏ≤¥ ÌéºÏ≥êÏßÑ ÏÉÅÌÉú ÌôïÏù∏ (Î°úÎìúÎêú Îç∞Ïù¥ÌÑ∞ Í∏∞Ï§Ä)
      try {
        const currentTodos = externalTodos || todos;
        const todosWithChildren = currentTodos.filter(
          (todo) => todo.children && todo.children.length > 0
        );
        const allExpanded =
          todosWithChildren.length > 0
            ? todosWithChildren.every((todo) => todo.isExpanded)
            : false;
        setIsAllExpanded(allExpanded);
      } catch (expandError) {
        console.error("Failed to check expand state:", expandError);
        setIsAllExpanded(false); // Í∏∞Î≥∏Í∞íÏúºÎ°ú ÏÑ§Ï†ï
      }
    } catch (error) {
      console.error("Failed to load hierarchical todos:", error);
      setMessage("Ìï†Ïùº Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    } finally {
      setIsLoading(false);
    }
  }, [externalTodos, showStats]);

  // Ïô∏Î∂Ä Îç∞Ïù¥ÌÑ∞Í∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (externalTodos) {
      setTodos(externalTodos);
      setIsLoading(false);
    } else {
      loadTodos();
    }
  }, [externalTodos, loadTodos]);

  // ÏÉà ÏµúÏÉÅÏúÑ Ìï†Ïùº Ï∂îÍ∞Ä
  const handleAddTodo = async () => {
    if (newTodoTitle.trim() === "") return;

    try {
      const nextOrder = todos.length;
      await addHierarchicalTodo({
        title: newTodoTitle.trim(),
        isDone: false,
        isExpanded: false,
        order: nextOrder,
        tags: [],
        date: new Date().toISOString(),
        repeat: "none",
      });

      setNewTodoTitle("");
      setIsAdding(false);
      setMessage("ÏÉà Ìï†ÏùºÏù¥ Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.");
      await loadTodos();
    } catch (error) {
      console.error("Failed to add todo:", error);
      setMessage("Ìï†Ïùº Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }
  };

  // Ìï†Ïùº Î≥µÏÇ¨ (ÎßàÌÅ¨Îã§Ïö¥ ÌòïÏãù)
  const handleCopyTodos = async () => {
    try {
      const markdown = await copyHierarchicalTodosAsMarkdown();
      await navigator.clipboard.writeText(markdown);
      setMessage("Ìï†Ïùº Î™©Î°ùÏù¥ ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!");
    } catch (error) {
      console.error("Failed to copy todos:", error);
      setMessage("Î≥µÏÇ¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }
  };

  // Ï†ÑÏ≤¥ ÌéºÏπòÍ∏∞/Ï†ëÍ∏∞ - Ï¶âÏãú Î∞òÏùëÌïòÎäî Î≤ÑÏ†Ñ
  const handleExpandAll = async () => {
    if (isExpandingAll) return;

    const newExpandState = !isAllExpanded;

    try {
      setIsExpandingAll(true);

      // 1. Ï¶âÏãú Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (ÏÇ¨Ïö©ÏûêÍ∞Ä Î∞îÎ°ú Î≥ÄÌôîÎ•º Î¥Ñ)
      setIsAllExpanded(newExpandState);

      // 2. Î©îÎ™®Î¶¨Ïùò todos Îç∞Ïù¥ÌÑ∞Î•º Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏ (UI Ï¶âÏãú Î∞òÏùë)
      const updatedTodos = todos.map((todo) => ({
        ...todo,
        isExpanded: newExpandState,
        updatedAt: new Date().toISOString(),
      }));
      setTodos(updatedTodos);

      // 3. Î©îÏãúÏßÄ Ï¶âÏãú ÌëúÏãú
      const action = newExpandState ? "ÌéºÏ≥êÏ°åÏäµÎãàÎã§" : "Ï†ëÌòÄÏ°åÏäµÎãàÎã§";
      setMessage(`üìÇ Î™®Îì† Ìï†ÏùºÏù¥ ${action}!`);
      setTimeout(() => setMessage(""), 2000);

      // 4. Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú DB ÏóÖÎç∞Ïù¥Ìä∏ (ÏÇ¨Ïö©ÏûêÎäî Í∏∞Îã§Î¶¨ÏßÄ ÏïäÏùå)
      expandAllHierarchicalTodos(newExpandState)
        .then(() => {
          // 5. DB ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å ÌõÑ ÏµúÏ¢Ö ÏÉàÎ°úÍ≥†Ïπ®
          return getHierarchicalTodosByParent();
        })
        .then((refreshedTodos) => {
          setTodos(refreshedTodos);
          // ÏµúÏ¢Ö ÏÉÅÌÉú Ïû¨ÌôïÏù∏
          const todosWithChildren = refreshedTodos.filter(
            (todo) => todo.children && todo.children.length > 0
          );
          const actualExpandState =
            todosWithChildren.length > 0
              ? todosWithChildren.every((todo) => todo.isExpanded)
              : false;
          setIsAllExpanded(actualExpandState);
        })
        .catch((error) => {
          console.error("Î∞±Í∑∏ÎùºÏö¥Îìú DB ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:", error);
          // DB ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå® Ïãú ÏõêÎûò ÏÉÅÌÉúÎ°ú ÎêòÎèåÎ¶¨Í∏∞
          setIsAllExpanded(!newExpandState);
          setMessage("‚ùå Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.");
          setTimeout(() => setMessage(""), 3000);
        });
    } finally {
      setIsExpandingAll(false);
    }
  };

  // ÎìúÎûòÍ∑∏ Ï¢ÖÎ£å Ìï∏Îì§Îü¨
  const handleDragEnd = async (event: DragEndEvent) => {
    const { active, over } = event;

    if (!over || active.id === over.id) {
      return; // ÎìúÎ°≠ ÏúÑÏπòÍ∞Ä ÏóÜÍ±∞ÎÇò Í∞ôÏùÄ ÏúÑÏπòÎ©¥ ÏïÑÎ¨¥Í≤ÉÎèÑ ÏïàÌï®
    }

    const activeIndex = todos.findIndex((todo) => todo.id === active.id);
    const overIndex = todos.findIndex((todo) => todo.id === over.id);

    if (activeIndex !== -1 && overIndex !== -1) {
      // Î°úÏª¨ ÏÉÅÌÉú Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏ (UI Î∞òÏùëÏÑ±)
      const newTodos = arrayMove(todos, activeIndex, overIndex);
      setTodos(newTodos);

      try {
        // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê ÏÉà ÏàúÏÑú Ï†ÄÏû•
        const newOrder = newTodos.map((todo) => todo.id);
        await reorderHierarchicalTodos(undefined, newOrder); // ÏµúÏÉÅÏúÑ Î†àÎ≤®
        setMessage("üì¶ ÏàúÏÑúÍ∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§!");
        setTimeout(() => setMessage(""), 2000);
      } catch (error) {
        console.error("Failed to reorder todos:", error);
        // Ïã§Ìå®Ïãú ÏõêÎûò ÏàúÏÑúÎ°ú ÎêòÎèåÎ¶¨Í∏∞
        await loadTodos();
        setMessage("‚ùå ÏàúÏÑú Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
        setTimeout(() => setMessage(""), 2000);
      }
    }
  };

  // Ïä§ÌÉÄÏùº Ï†ïÏùò
  const containerStyles: React.CSSProperties = {
    width: "100%",
    maxWidth: "800px",
    margin: "0 auto",
  };

  const headerStyles: React.CSSProperties = {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: currentTheme.spacing["4"],
  };

  const statsStyles: React.CSSProperties = {
    display: "flex",
    gap: currentTheme.spacing["2"],
    alignItems: "center",
  };

  const buttonGroupStyles: React.CSSProperties = {
    display: "flex",
    gap: currentTheme.spacing["2"],
    alignItems: "center",
  };

  const addTodoStyles: React.CSSProperties = {
    display: "flex",
    gap: currentTheme.spacing["2"],
    marginBottom: currentTheme.spacing["4"],
    padding: currentTheme.spacing["3"],
    backgroundColor: currentTheme.colors.background.tertiary,
    borderRadius: currentTheme.borderRadius.md,
    border: `1px solid ${currentTheme.colors.border.default}`,
  };

  const emptyStateStyles: React.CSSProperties = {
    textAlign: "center",
    padding: currentTheme.spacing["8"],
    color: currentTheme.colors.text.secondary,
    fontSize: currentTheme.typography.fontSize.lg,
  };

  const messageStyles: React.CSSProperties = {
    padding: currentTheme.spacing["2"],
    marginBottom: currentTheme.spacing["4"],
    backgroundColor: currentTheme.colors.background.tertiary,
    border: `1px solid ${currentTheme.colors.border.default}`,
    borderRadius: currentTheme.borderRadius.md,
    color: currentTheme.colors.text.primary,
    fontSize: currentTheme.typography.fontSize.sm,
  };

  return (
    <Card
      style={{
        ...containerStyles,
        border: "none",
        backgroundColor: "transparent",
      }}
    >
      <CardHeader>
        <div style={headerStyles}>
          <div>
            <CardTitle>{title}</CardTitle>
            {showStats && progress.total > 0 && (
              <div style={statsStyles}>
                <Badge variant="info">
                  Ï†ÑÏ≤¥: {progress.completed}/{progress.total}
                </Badge>
                <Badge
                  variant={
                    progress.percentage === 100
                      ? "success"
                      : progress.percentage > 50
                      ? "info"
                      : "default"
                  }
                >
                  {progress.percentage}% ÏôÑÎ£å
                </Badge>
              </div>
            )}
          </div>

          <div style={buttonGroupStyles}>
            {showCopyButton && todos.length > 0 && (
              <Button variant="secondary" size="sm" onClick={handleCopyTodos}>
                üìã Î≥µÏÇ¨
              </Button>
            )}
            <Button
              variant="ghost"
              size="sm"
              onClick={handleExpandAll}
              disabled={isExpandingAll}
            >
              {isExpandingAll
                ? "‚è≥ Ï≤òÎ¶¨Ï§ë..."
                : isAllExpanded
                ? "üìÅ Ï†ÑÏ≤¥ Ï†ëÍ∏∞"
                : "üìÇ Ï†ÑÏ≤¥ ÌéºÏπòÍ∏∞"}
            </Button>
            {showAddButton && (
              <Button
                variant="primary"
                size="sm"
                onClick={() => setIsAdding(true)}
                disabled={isAdding}
              >
                ‚ûï Ï∂îÍ∞Ä
              </Button>
            )}
          </div>
        </div>
      </CardHeader>

      <CardContent>
        {/* Î©îÏãúÏßÄ ÌëúÏãú */}
        {message && (
          <div style={messageStyles}>
            {message}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setMessage("")}
              style={{
                float: "right",
                fontSize: "12px",
                padding: "2px 6px",
                minHeight: "auto",
              }}
            >
              ‚úï
            </Button>
          </div>
        )}

        {/* ÏÉà Ìï†Ïùº Ï∂îÍ∞Ä UI */}
        {isAdding && (
          <div style={addTodoStyles}>
            <Input
              placeholder="ÏÉà Ìï†Ïùº Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
              value={newTodoTitle}
              onChange={(e) => setNewTodoTitle(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === "Enter") handleAddTodo();
                if (e.key === "Escape") {
                  setNewTodoTitle("");
                  setIsAdding(false);
                }
              }}
              style={{ flex: 1 }}
              autoFocus
            />
            <Button variant="primary" size="sm" onClick={handleAddTodo}>
              Ï∂îÍ∞Ä
            </Button>
            <Button
              variant="secondary"
              size="sm"
              onClick={() => {
                setNewTodoTitle("");
                setIsAdding(false);
              }}
            >
              Ï∑®ÏÜå
            </Button>
          </div>
        )}

        {/* Î°úÎî© ÏÉÅÌÉú */}
        {isLoading && (
          <div style={emptyStateStyles}>‚è≥ Ìï†Ïùº Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
        )}

        {/* Îπà ÏÉÅÌÉú */}
        {!isLoading && todos.length === 0 && (
          <div style={emptyStateStyles}>
            üìù ÏïÑÏßÅ Ìï†ÏùºÏù¥ ÏóÜÏäµÎãàÎã§.
            <br />
            <br />
            <Button variant="primary" onClick={() => setIsAdding(true)}>
              Ï≤´ Î≤àÏß∏ Ìï†Ïùº Ï∂îÍ∞ÄÌïòÍ∏∞
            </Button>
          </div>
        )}

        {/* Ìï†Ïùº Î™©Î°ù */}
        {!isLoading && todos.length > 0 && (
          <DndContext
            sensors={sensors}
            collisionDetection={closestCenter}
            onDragEnd={handleDragEnd}
          >
            <SortableContext
              items={todos.map((todo) => todo.id)}
              strategy={verticalListSortingStrategy}
            >
              <div>
                {todos.map((todo) => (
                  <HierarchicalTodoItem
                    key={`${todo.id}-${todo.isExpanded}-${todo.updatedAt}`}
                    todo={todo}
                    level={0}
                    onUpdate={loadTodos}
                  />
                ))}
              </div>
            </SortableContext>
          </DndContext>
        )}
      </CardContent>
    </Card>
  );
};

export default HierarchicalTodoList;
export type { HierarchicalTodoListProps };
